@startuml VE Classes
skinparam monochrome true
skinparam componentStyle uml2
skinparam classAttributeIconSize 0
skinparam shadowing false
skinparam handwritten false

title Vector Editor Class Diagramm

' left to right direction
package FUDGE <<Rectangle>> {
	package Transfer {
		package Mutable <<Rectangle>>{
			
		}
	}

	package VectorEditor <<Rectangle>>{
		interface Shortcut{
			keys: number[]
		}
		class UIHandler{
			actions: Action[]
			loadActions()
			loadShortcuts()
			createUI()
			updateUI()
			deselectAll()
			updateSelectedObjectUI()
			updateSelectedObject()
		}

		class Editor{
			- paths: DrawPath[]
			- selectedPaths: DrawPath[]
			- selectedPoints: DrawPoint[]
			+ selectedAction: Action
			- canvas: HTMLCanvasElement
			- crc: CanvasRenderingContext2D
			- scale: number
			- transformationPoint: Vector2
			+ pressedKeys: number[]
			- uiHandler: UIHandler
			- showTangentsShortcut: Shortcut
			+ tangentsActive: boolean

			- redrawAll()
			- mousedown()
			- mousemove()
			- mouseup()
			- keydown()
			- keyup()
			- scroll()
			{static} + isShortcutPressed(_s: Shortcut): boolean

		}
		class UIElement extends DOM.HTMLElement{
			name: string
			hover: string
			help: string
			extendedHelp: string
			' element: HTMLElement
		}

		class Action extends UIElement{
			name: string
			buttonElement: HTMLButtonElement
			subMenu: UIElement
			shortcut: Shortcut
			selectedSubAction: Action
			subActions: Action[]
			' cursor: Image
			mousedown()
			mousemove()
			mouseup()
			prequisitesFulfilled(): boolean
			additionalDisplay(crc: CanvasRenderingContext2D)
		}

		class SelectAction extends Action {
			boxSelect: boolean
			multiSelectShortcut: Shortcut
			move: MoveAction
			startPosition: Vector2
			currentPosition: Vector2
		}
		class MoveAction extends Action {
			- previousPosition: Vector2
		}
		class TransformAction extends Action {
			scaleUp: DrawPoint
			scaleDown: DrawPoint
			scaleLeft: DrawPoint
			scaleRight: DrawPoint
			scaleUpLeft: DrawPoint
			scaleUpRight: DrawPoint
			scaleDownLeft: DrawPoint
			scaleDownRight: DrawPoint
			scalePoints: DrawPoint[]
			selectedScalePoint: DrawPoint
			
			move: MoveAction
			rotate: RotateAction
			scale: ScaleAction
		}
		class ScaleAction extends Action {
			- previousPosition: Vector2
			- referencePoint: Vector2
			- mode: "x" | "y" | "xy"
		}
		class RotateAction extends Action {
			- previousPosition: Vector2
		}
		class CombineAction extends Action {

		}
		class CreateShapes extends Action {

		}
		class AddVertex extends Action {

		}
		class Export extends Action {

		}

		'Associations
		Shortcut "1"-- "1"Action
		UIHandler -- "n" Action
		Editor -- "1" Action
		Editor .. UIHandler
		Action "1"--"n" Action
	}
	package DrawTypes <<Rectangle>>{
		class DrawObject extends Mutable.Mutator{
			+ color: string | CanvasGradient | CanvasPattern
			+ name: String
			+ order: number
			+ lineWidth: number
			+ transformationPoint: DrawPoint
			# path2d: Path2D
			{static} sort(a: DrawObject, b: DrawObject): number
		}

		class DrawPath extends DrawObject {
			- closed: boolean
			+ points: Vertex[]
			+ fillColor: string | CanvasGradient | CanvasPattern
			' + transformationPoint: Vector2;
			draw(context: CanvasRenderingContext2D, selected: boolean = false)
			generatePath2D()
			addVertexAtPos(vertex: Vertex, index: number = -1)
			move(d: Vector2)
		}

		class DrawPoint extends Math.Vector2{
			# path2d: Path2D
			generatePath2D(): Path2D
			draw(context: CanvasRenderingContext2D, selected: boolean = false)
			move(delta: Vector2)
			moveTo(newPos: Vector2)
		}

		class Vertex extends DrawPoint {
			activated: boolean
			tangentIn: TangentPoint
			tangentOut: TangentPoint
			+ parent: DrawPath
			draw(context: CanvasRenderingContext2D, selected: boolean = false, showTangents: boolean = false)
			move(dx: number, dy: number)
			activate()
		}

		class TangentPoint extends DrawPoint {
			+ parent: Vertex
			generatePath2D(): Path2D
		}

		' Associations
		DrawPath "1" -- "n" Vertex
		Vertex "1" -- "2" TangentPoint
	}

	package Math <<rectangle>> {
		class Vector2 extends Mutable.Mutator{
			+ x: number
			+ y: number

			+ equals(obj: Vector2): boolean
			+ magnitude(): number
			+ sqrMagnitude(): number
			+ normalize(): Vector2
			+ perpendicularVector(): Vector2
			+ scaled(s: number): Vector2

			{static} dot(a: Vector2, b: Vector2): number
			{static} add(...params: Vector2[]): Vector2
	}
}
@enduml