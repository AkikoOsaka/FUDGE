@startuml
skinparam monochrome true
skinparam componentStyle uml2
skinparam classAttributeIconSize 0
skinparam shadowing false
skinparam handwritten true

top to bottom direction

package Fudge <<Rectangle>>{
  ' gl2: WebGL2RenderingContext
  
  package "Math" <<Folder>> {
    class Vector3 {
      - data: number[]
      // to be refactored, components as x,y,z numbers
    }
    class Matrix3x3 {
      public data: number[]
    }
    class Matrix4x4 {
      public data: Float32Array
    }
    Matrix4x4 --() Serializable
  }
  
  package "Shader" << Folder>> {
    abstract class Shader {
      - program: WebGLProgram
      - attributes: MapStringToNumber
      - uniforms: MapStringToWebGLUniformLocation
    }
    class ShaderBasic extends Shader {
    }
    class ShaderTexture extends Shader {
    }
  }
  
  package "Engine" <<Folder>> {
    file "Node" {
      class Node {
        - parent: Node | null
        - children: Node[]
        - components: MapClassToComponents
      }
      interface MapClassToComponents{
        [className: string]: Component[]
      }
      interface MapStringToNode {
        [key: string]: Node
      }
    }
    Serializable ()-- Node
    interface BufferSpecification {
      size: number
      dataType: number
      normalize: boolean
      stride: number
      offset: number
    }
    
    class Color {
      // to be implemented
    }
    abstract class GLUtil {
    }
    class Material {
      // to be refactored!
    }
    class Viewport {
      - name: string
      - camera: ComponentCamera
      - rootNode: Node
      - vertexArrayObjects: MapStringToWebGLVertexArrayObject
      - buffers: MapStringToWebGLBuffer
    }

    file "Serializer" {
      interface Serializable {
        serialize(): Serialization;
        deserialize(_serialization: Serialization): Serializable;
      }
      interface Serialization {
        [type: string]: General;
      }
      class Serializer {
        {static} + serialize(_object: Serializable): Serialization
        {static} + deserialize(_serialization: Serialization): Serializable
      }
    }
  }
  
  package "Components" <<Folder>> {
    abstract class Component {
      - container: Node | null
      - singleton: boolean
      - active: boolean
    }
    Component -() Serializable
    class ComponentCamera extends Component {
      - orthographic: boolean
      - projectionMatrix: Matrix4x4
      - fieldOfView: number
      - backgroundColor: Vector3
      - backgroundEnabled: boolean
    }
    class ComponentMaterial extends Component {
      // to be refactored!
    }
    class ComponentMesh extends Component {
      - mesh: Mesh
      - vertices: Float32Array
      - vertexCount: number;
      - bufferSpecification: BufferSpecification
      - normals: Float32Array
    }
    class ComponentPivot extends Component {
      # matrix: Matrix4x4
    }
    class ComponentTransform extends ComponentPivot {
      + worldMatrix: Matrix4x4
    }
  }
  package "Meshes" <<Folder>> {
    interface Mesh extends Serializable {
      getVertices(): Float32Array
    }
    class MeshCube implements Mesh {
      public width: number;
      public height: number;
      public depth: number;
    }
  }

  Node "0..1 parent"<-left->"0..n children" Node
  ComponentMesh -->"1" Mesh
  Node "1 container"<-->"0..n" Component
  ComponentPivot -->"1" Matrix4x4
  ComponentTransform -->"1" Matrix4x4
  Viewport -->"1 root" Node
  Viewport -->"1 camera" ComponentCamera
}
@enduml
