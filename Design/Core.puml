@startuml FUDGE-Core
skinparam monochrome true
skinparam componentStyle uml2
skinparam classAttributeIconSize 0
skinparam shadowing false
skinparam handwritten false

'page 2x2
left to right direction
'top to bottom direction

package Fudge <<Rectangle>> {
  ' gl2: WebGL2RenderingContext

  package "Engine" <<Folder>> {
    file "Node" {
      interface MapClassToComponents{
        [className: string]: Component[]
      }
      interface MapStringToNode {
        [key: string]: Node
      }
      class Node extends EventTarget {
        - parent: Node | null
        - children: Node[]
        - components: MapClassToComponents
      }
    }
    class Color {
      + r: number
      + g: number
      + b: number
      + a: number
    }
    class Material {
      - name: string
      - shaderClass: typeof Shader
      - color: Vector3
      - textureEnabled: boolean
      - textureSource: string
    }
    class Viewport extends EventTarget {
      + name: string
      + camera: ComponentCamera
      + branch: Node
      + rectSource: Rectangle
      + rectDestination: Rectangle
      + mapClientToCanvas: MapRectangle
      + mapCanvasToDestination: MapRectangle
      + mapDestinationToSource: MapRectangle
      + mapSourceToRender: MapRectangle
      + mappingRects: boolean
      + adjustingCamera: boolean
      - canvas: HTMLCanvasElement
      - crc2: CanvasRenderingContext2D
    }

    file "Event"{
      interface MapEventTypeToListener {
        [eventType: string]: EventListener[]
      }

      enum EVENT

      class EventTargetStatic extends EventTarget {
        #{static} targetStatic: EventTargetStatic
      }
    }

    class Loop extends EventTargetStatic {
      - {static} running: boolean = false
      + {static} start(): void
    }
  }

  package "Render" <<Folder>> {
    interface NodeReferences {
      shader: typeof Shader
      material: Material
      mesh: Mesh
      doneTransformToWorld: boolean
    }
    interface BufferSpecification {
      size: number
      dataType: number
      normalize: boolean
      stride: number
      offset: number
    }
    interface ShaderInfo {
      program: RenderManagerProgram
      attributes: MapNameToValue
      uniforms: MapNameToUniformLocation
    }
    interface BufferInfo {
      buffer: RenderManagerBuffer
      target: number
      specification: BufferSpecification
      vertexCount: number
    }
    interface MaterialInfo {
      vao: RenderManagerVertexArrayObject
      color: Vector3
    }
    class Reference<T> {
      private reference: T
      private count: number = 0
    }
    class RenderManager extends RenderOperator {
      - {static} programs: Map<typeof Shader, Reference<ShaderInfo>>
      - {static} parameters: Map<Material, Reference<MaterialInfo>>
      - {static} buffers: Map<Mesh, Reference<BufferInfo>>
      - {static} nodes: MapNodeToNodeReferences
    }
    class RenderOperator {
      + {static} crc3: WebGL2RenderingContext
      + {static} canvas: HTMLCanvasElement
      + {static} rectViewport: Rectangle
    }
  }

  package "Browser" <<Cloud>> {
    class EventTarget
    class WebGL2RenderingContext
    class HTMLCanvasElement
    class CanvasRenderingContext2D
  }
  package "Transfer" <<Folder>> {
    file "Serializer" {
      interface Serializable {
        serialize(): Serialization
        deserialize(_serialization: Serialization): Serializable
      }
      interface Serialization {
        [type: string]: General
      }
      class Serializer {
        {static} + serialize(_object: Serializable): Serialization
        {static} + deserialize(_serialization: Serialization): Serializable
      }
    }
    file "Mutable" {
      interface MutatorAttributeTypes
      interface Mutator

      interface MutatorForAnimation extends Mutator
      interface MutatorForUserInterface extends Mutator
      class Mutable extends EventTarget {
        + getMutator(): Mutator
        + getMutatorForAnimation(): MutatorForAnimation
        + getMutatorForUserInterface(): MutatorForUserInterface
        + getMutatorAttributeTypes(_mutator: Mutator): MutatorAttributeTypes
        + updateMutator(_mutator: Mutator): void
        # mutate(_mutator: Mutator): void
      }
    }
  }

  package "Components" <<Folder>> {
    abstract class Component extends Mutable {
      # singleton: boolean
      - container: Node | null
      - active: boolean
    }

    class ComponentCamera extends Component {
      - orthographic: boolean
      - projectionMatrix: Matrix4x4
      - fieldOfView: number
      - aspectRatio: number
      - backgroundColor: Vector3
      - backgroundEnabled: boolean
    }
    class ComponentMaterial extends Component {
      - material: Material;
    }
    class ComponentMesh extends Component {
      - mesh: Mesh
    }
    class ComponentPivot extends Component {
      + local: Matrix4x4
    }
    class ComponentTransform extends ComponentPivot {
      + world: Matrix4x4
    }
    class ComponentScript extends Component {
    }
  }

  package "Meshes" <<Folder>> {
    class Mesh {
      # vertices: Float32Array
    }
    class MeshCube extends Mesh {
      + width: number
      + height: number
      + depth: number
    }
  }

  package "Math" <<Folder>> {
    class Vector3 {
      - data: number[]
      // to be refactored, components as x,y,z numbers
    }
    class Matrix3x3 {
      + data: number[]
    }
    class Matrix4x4 extends Mutable {
      + data: Float32Array
    }
    file "Rectangle" {
      interface Rectangle {
        x: number
        y: number
        width: number
        height: number
      }
      interface Border {
        left: number
        right: number
        top: number
        bottom: number
      }
      class MapRectangle {
        + normAnchor: Border
        + pixelBorder: Border
        + getRect(_rectFrame: Rectangle): Rectangle
      }
    }
  }

  package "Shader" << Folder>> {
    abstract class Shader {
      + {static} loadVertexShaderSource(): string
      + {static} loadFragmentShaderSource(): string
    }
    class ShaderBasic extends Shader {
    }
    class ShaderTexture extends Shader {
    }
  }

  ' Associations
  Mesh --() Serializable
  Component --() Serializable
  Node  --() Serializable
  Matrix4x4 --() Serializable
  Serializer  -(0- Serializable
  Serializer  -(0- Serialization

  Mutable -(0- Mutator
  Mutable -(0- MutatorAttributeTypes

  Node "0..1 parent" o-left- "n children" Node
  Node "1 container" o-- "n components" Component

  ComponentMesh "n" --> "1" Mesh
  ComponentPivot -->"1" Matrix4x4
  ComponentTransform -->"1" Matrix4x4
  ComponentMaterial "n" --> "1" Shader : refers >
  Shader "n"-->"1" Material : uses >
  Viewport -->"1 root" Node : displays >
  Viewport -->"1 camera" ComponentCamera : look through >
  Viewport "n" --> "1" CanvasRenderingContext2D : renders >
  Viewport "n" -> "1" RenderManager : feeds data and retrieves image >
  RenderManager "1" -> "1" WebGL2RenderingContext : store buffers\nrender offscreen >
  RenderManager "1" o--> "n" NodeReferences : keeps >
  RenderManager "1" o--> "n" Reference : keeps >
  Reference "1" --> "1" ShaderInfo : shader uses >
  Reference "1" --> "1" BufferInfo : mesh uses >
  Reference "1" --> "1" MaterialInfo : material uses >
  BufferInfo --> BufferSpecification : provides >

  'improve layout
  'Node -[hidden]- Serializable
  'Component -[hidden]- Serializable
  'Serializer --[hidden]-- Mutable
  'Mutable --[hidden]-- Component
  'Viewport -[hidden]- ComponentCamera
  'Engine -[hidden]- Meshes
  'Engine -[hidden]- Browser
  'Loop -[hidden]- Material
  'Meshes --[hidden]up-- Shader
  'EventTarget -[hidden] EventTargetStatic
  @enduml
