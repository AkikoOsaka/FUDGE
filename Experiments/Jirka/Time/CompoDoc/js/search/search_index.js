var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.6","fields":["title","body"],"fieldVectors":[["title/classes/Time.html",[0,0.469,1,0.469]],["body/classes/Time.html",[0,0.391,1,0.709,2,0.621,3,0.621,4,0.621,5,0.415,6,0.415,7,1.363,8,1.049,9,1.049,10,2.176,11,1.049,12,1.602,13,1.791,14,1.049,15,1.049,16,1.049,17,2.176,18,0.621,19,0.178,20,1.049,21,2.612,22,1.363,23,1.363,24,1.363,25,1.363,26,1.049,27,1.602,28,1.602,29,1.602,30,1.602,31,1.363,32,2.411,33,1.049,34,0.931,35,0.153,36,2.818,37,0.621,38,1.049,39,1.049,40,0.621,41,0.621,42,0.621,43,1.049,44,0.621,45,1.944,46,2.266,47,1.602,48,1.602,49,1.602,50,1.197,51,0.621,52,1.049,53,1.049,54,1.602,55,1.049,56,1.049,57,1.049,58,0.621,59,1.049,60,0.621,61,1.049,62,1.602,63,0.701,64,0.701,65,0.701,66,1.944,67,1.049,68,1.363,69,0.701,70,1.049,71,1.602,72,1.071,73,1.049,74,0.621,75,1.049,76,1.049,77,0.701,78,1.363,79,1.791,80,1.049,81,0.621,82,0.621,83,0.621,84,0.621,85,0.621,86,0.621,87,0.621,88,0.621,89,0.621,90,1.363,91,1.363,92,1.602,93,1.363,94,1.363,95,1.363,96,1.049,97,1.049,98,0.621,99,0.621,100,0.03,101,0.05,102,0.03]],["title/coverage.html",[103,1.475]],["body/coverage.html",[0,0.542,1,0.696,5,1.263,6,1.263,34,0.85,35,0.146,69,1.89,100,0.091,101,0.117,102,0.091,103,1.263,104,1.889,105,1.889,106,1.889,107,1.889,108,1.889,109,1.272,110,2.68,111,1.263,112,2.828,113,1.263,114,1.263,115,1.889,116,1.889,117,1.889,118,1.889]],["title/miscellaneous/functions.html",[119,0.396,120,1.31]],["body/miscellaneous/functions.html",[19,0.573,35,0.146,50,1.839,63,1.336,64,1.336,65,1.336,72,1.839,100,0.096,101,0.121,102,0.096,109,1.299,111,1.681,113,1.839,114,1.839,119,0.573,120,1.336,121,1.999,122,1.999]],["title/index.html",[19,0.469,123,1.094]],["body/index.html",[0,0.695,35,0.136,77,1.619,100,0.117,101,0.136,102,0.117,123,1.619]],["title/modules.html",[124,1.475]],["body/modules.html",[35,0.137,100,0.118,101,0.137,102,0.118,124,1.645]],["title/miscellaneous/variables.html",[119,0.396,125,1.31]],["body/miscellaneous/variables.html",[1,0.839,19,0.659,34,1.033,35,0.141,100,0.11,101,0.132,102,0.11,109,1.232,119,0.659,125,1.535]]],"invertedIndex":[["",{"_index":35,"title":{},"body":{"classes/Time.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":69,"title":{},"body":{"classes/Time.html":{},"coverage.html":{}}}],["0.0",{"_index":71,"title":{},"body":{"classes/Time.html":{}}}],["0/1",{"_index":112,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":77,"title":{},"body":{"classes/Time.html":{},"index.html":{}}}],["1.0",{"_index":79,"title":{},"body":{"classes/Time.html":{}}}],["2019",{"_index":88,"title":{},"body":{"classes/Time.html":{}}}],["58",{"_index":107,"title":{},"body":{"coverage.html":{}}}],["7/12",{"_index":108,"title":{},"body":{"coverage.html":{}}}],["_event",{"_index":122,"title":{},"body":{"miscellaneous/functions.html":{}}}],["_scale",{"_index":78,"title":{},"body":{"classes/Time.html":{}}}],["_time",{"_index":68,"title":{},"body":{"classes/Time.html":{}}}],["allowing",{"_index":75,"title":{},"body":{"classes/Time.html":{}}}],["allows",{"_index":15,"title":{},"body":{"classes/Time.html":{}}}],["author",{"_index":83,"title":{},"body":{"classes/Time.html":{}}}],["automatically",{"_index":56,"title":{},"body":{"classes/Time.html":{}}}],["call",{"_index":54,"title":{},"body":{"classes/Time.html":{}}}],["class",{"_index":0,"title":{"classes/Time.html":{}},"body":{"classes/Time.html":{},"coverage.html":{},"index.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/Time.html":{}}}],["comment",{"_index":39,"title":{},"body":{"classes/Time.html":{}}}],["constructor",{"_index":31,"title":{},"body":{"classes/Time.html":{}}}],["correlates",{"_index":11,"title":{},"body":{"classes/Time.html":{}}}],["coverage",{"_index":103,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["current",{"_index":46,"title":{},"body":{"classes/Time.html":{}}}],["default",{"_index":66,"title":{},"body":{"classes/Time.html":{}}}],["defined",{"_index":32,"title":{},"body":{"classes/Time.html":{}}}],["dell'oro",{"_index":85,"title":{},"body":{"classes/Time.html":{}}}],["description",{"_index":7,"title":{},"body":{"classes/Time.html":{}}}],["desired",{"_index":80,"title":{},"body":{"classes/Time.html":{}}}],["documentation",{"_index":104,"title":{},"body":{"coverage.html":{}}}],["elapsed",{"_index":12,"title":{},"body":{"classes/Time.html":{}}}],["example",{"_index":18,"title":{},"body":{"classes/Time.html":{}}}],["export",{"_index":89,"title":{},"body":{"classes/Time.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/Time.html":{},"coverage.html":{}}}],["friedl",{"_index":86,"title":{},"body":{"classes/Time.html":{}}}],["function",{"_index":110,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":120,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generate",{"_index":9,"title":{},"body":{"classes/Time.html":{}}}],["getelapsedsincepreviouscall",{"_index":27,"title":{},"body":{"classes/Time.html":{}}}],["getscale",{"_index":28,"title":{},"body":{"classes/Time.html":{}}}],["hfu",{"_index":87,"title":{},"body":{"classes/Time.html":{}}}],["identifier",{"_index":105,"title":{},"body":{"coverage.html":{}}}],["index",{"_index":19,"title":{"index.html":{}},"body":{"classes/Time.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/Time.html":{}}}],["init",{"_index":111,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["init(_event",{"_index":121,"title":{},"body":{"miscellaneous/functions.html":{}}}],["instance",{"_index":48,"title":{},"body":{"classes/Time.html":{}}}],["instances",{"_index":8,"title":{},"body":{"classes/Time.html":{}}}],["jirka",{"_index":84,"title":{},"body":{"classes/Time.html":{}}}],["last",{"_index":53,"title":{},"body":{"classes/Time.html":{}}}],["lastcalltoelapsed",{"_index":22,"title":{},"body":{"classes/Time.html":{}}}],["matching",{"_index":101,"title":{},"body":{"classes/Time.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/variables.html":{}}}],["method",{"_index":55,"title":{},"body":{"classes/Time.html":{}}}],["methods",{"_index":26,"title":{},"body":{"classes/Time.html":{}}}],["milliseconds",{"_index":49,"title":{},"body":{"classes/Time.html":{}}}],["miscellaneous",{"_index":119,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["modules",{"_index":124,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["name",{"_index":64,"title":{},"body":{"classes/Time.html":{},"miscellaneous/functions.html":{}}}],["namespace",{"_index":81,"title":{},"body":{"classes/Time.html":{}}}],["new",{"_index":116,"title":{},"body":{"coverage.html":{}}}],["number",{"_index":36,"title":{},"body":{"classes/Time.html":{}}}],["offset",{"_index":23,"title":{},"body":{"classes/Time.html":{}}}],["optional",{"_index":65,"title":{},"body":{"classes/Time.html":{},"miscellaneous/functions.html":{}}}],["overview",{"_index":123,"title":{"index.html":{}},"body":{"index.html":{}}}],["param",{"_index":96,"title":{},"body":{"classes/Time.html":{}}}],["parameters",{"_index":63,"title":{},"body":{"classes/Time.html":{},"miscellaneous/functions.html":{}}}],["passed",{"_index":52,"title":{},"body":{"classes/Time.html":{}}}],["performance.now",{"_index":91,"title":{},"body":{"classes/Time.html":{}}}],["private",{"_index":21,"title":{},"body":{"classes/Time.html":{}}}],["program",{"_index":14,"title":{},"body":{"classes/Time.html":{}}}],["properties",{"_index":20,"title":{},"body":{"classes/Time.html":{}}}],["re",{"_index":61,"title":{},"body":{"classes/Time.html":{}}}],["represent",{"_index":70,"title":{},"body":{"classes/Time.html":{}}}],["reset",{"_index":57,"title":{},"body":{"classes/Time.html":{}}}],["resetting",{"_index":16,"title":{},"body":{"classes/Time.html":{}}}],["result",{"_index":100,"title":{},"body":{"classes/Time.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":102,"title":{},"body":{"classes/Time.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/variables.html":{}}}],["retrieves",{"_index":45,"title":{},"body":{"classes/Time.html":{}}}],["return",{"_index":95,"title":{},"body":{"classes/Time.html":{}}}],["returns",{"_index":50,"title":{},"body":{"classes/Time.html":{},"miscellaneous/functions.html":{}}}],["scale",{"_index":24,"title":{},"body":{"classes/Time.html":{}}}],["scaled",{"_index":47,"title":{},"body":{"classes/Time.html":{}}}],["scaling",{"_index":17,"title":{},"body":{"classes/Time.html":{}}}],["set",{"_index":29,"title":{},"body":{"classes/Time.html":{}}}],["set(_time",{"_index":59,"title":{},"body":{"classes/Time.html":{}}}],["sets",{"_index":62,"title":{},"body":{"classes/Time.html":{}}}],["setscale",{"_index":30,"title":{},"body":{"classes/Time.html":{}}}],["setscale(_scale",{"_index":73,"title":{},"body":{"classes/Time.html":{}}}],["slowmotion",{"_index":76,"title":{},"body":{"classes/Time.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/Time.html":{}}}],["start",{"_index":13,"title":{},"body":{"classes/Time.html":{}}}],["statements",{"_index":106,"title":{},"body":{"coverage.html":{}}}],["string",{"_index":43,"title":{},"body":{"classes/Time.html":{}}}],["table",{"_index":118,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":117,"title":{},"body":{"coverage.html":{}}}],["testanimation",{"_index":113,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["testing",{"_index":38,"title":{},"body":{"classes/Time.html":{}}}],["testnumbers",{"_index":114,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["this.get",{"_index":99,"title":{},"body":{"classes/Time.html":{}}}],["this.getelapsedsincepreviouscall",{"_index":97,"title":{},"body":{"classes/Time.html":{}}}],["this.lastcalltoelapsed",{"_index":94,"title":{},"body":{"classes/Time.html":{}}}],["this.offset",{"_index":93,"title":{},"body":{"classes/Time.html":{}}}],["this.scale",{"_index":92,"title":{},"body":{"classes/Time.html":{}}}],["this.set(this.get",{"_index":98,"title":{},"body":{"classes/Time.html":{}}}],["this.start",{"_index":90,"title":{},"body":{"classes/Time.html":{}}}],["time",{"_index":1,"title":{"classes/Time.html":{}},"body":{"classes/Time.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["time.ts",{"_index":6,"title":{},"body":{"classes/Time.html":{},"coverage.html":{}}}],["time.ts:10",{"_index":40,"title":{},"body":{"classes/Time.html":{}}}],["time.ts:12",{"_index":37,"title":{},"body":{"classes/Time.html":{}}}],["time.ts:13",{"_index":33,"title":{},"body":{"classes/Time.html":{}}}],["time.ts:24",{"_index":44,"title":{},"body":{"classes/Time.html":{}}}],["time.ts:31",{"_index":60,"title":{},"body":{"classes/Time.html":{}}}],["time.ts:40",{"_index":74,"title":{},"body":{"classes/Time.html":{}}}],["time.ts:48",{"_index":58,"title":{},"body":{"classes/Time.html":{}}}],["time.ts:55",{"_index":51,"title":{},"body":{"classes/Time.html":{}}}],["time.ts:8",{"_index":42,"title":{},"body":{"classes/Time.html":{}}}],["time.ts:9",{"_index":41,"title":{},"body":{"classes/Time.html":{}}}],["timestamp",{"_index":10,"title":{},"body":{"classes/Time.html":{}}}],["timetest",{"_index":82,"title":{},"body":{"classes/Time.html":{}}}],["timetest.ts",{"_index":109,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["type",{"_index":34,"title":{},"body":{"classes/Time.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["value",{"_index":67,"title":{},"body":{"classes/Time.html":{}}}],["variable",{"_index":115,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":125,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["void",{"_index":72,"title":{},"body":{"classes/Time.html":{},"miscellaneous/functions.html":{}}}],["xz",{"_index":25,"title":{},"body":{"classes/Time.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/Time.html":{"url":"classes/Time.html","title":"class - Time","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Time\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            Time.ts\n        \n\n            \n                Description\n            \n            \n                Instances of this class generate a timestamp that correlates with the time elapsed\nsince the start of the program but allows for resetting and scaling\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                lastCallToElapsed\n                            \n                            \n                                    Private\n                                offset\n                            \n                            \n                                    Private\n                                scale\n                            \n                            \n                                    Private\n                                start\n                            \n                            \n                                    Private\n                                xz\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                get\n                            \n                            \n                                getElapsedSincePreviousCall\n                            \n                            \n                                getScale\n                            \n                            \n                                set\n                            \n                            \n                                setScale\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in Time.ts:13\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            lastCallToElapsed\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in Time.ts:12\n                            \n                        \n\n                \n                    \n                        just testing comment \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            offset\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in Time.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            scale\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in Time.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            start\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in Time.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            xz\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in Time.ts:13\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            get\n                        \n                        \n                    \n                \n            \n            \n                \nget()\n                \n            \n\n\n            \n                \n                    Defined in Time.ts:24\n                \n            \n\n\n            \n                \n                    Retrieves the current scaled timestamp of this instance in milliseconds\n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getElapsedSincePreviousCall\n                        \n                        \n                    \n                \n            \n            \n                \ngetElapsedSincePreviousCall()\n                \n            \n\n\n            \n                \n                    Defined in Time.ts:55\n                \n            \n\n\n            \n                \n                    Retrieves the scaled time in milliseconds passed since the last call to this method\nAutomatically reset at every call to set(...) and setScale(...)\n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getScale\n                        \n                        \n                    \n                \n            \n            \n                \ngetScale()\n                \n            \n\n\n            \n                \n                    Defined in Time.ts:48\n                \n            \n\n\n            \n                \n                    Retrieves the current scaling of this time\n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            set\n                        \n                        \n                    \n                \n            \n            \n                \nset(_time: number)\n                \n            \n\n\n            \n                \n                    Defined in Time.ts:31\n                \n            \n\n\n            \n                \n                    (Re-) Sets the timestamp of this instance\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    _time\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                    \n                                        The timestamp to represent the current time (default 0.0)\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setScale\n                        \n                        \n                    \n                \n            \n            \n                \nsetScale(_scale: number)\n                \n            \n\n\n            \n                \n                    Defined in Time.ts:40\n                \n            \n\n\n            \n                \n                    Sets the scaling of this time, allowing for slowmotion (1) \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    _scale\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        1.0\n                                    \n\n                                    \n                                        The desired scaling (default 1.0)\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        namespace TimeTest {\n    /**\n     * Instances of this class generate a timestamp that correlates with the time elapsed\n     * since the start of the program but allows for resetting and scaling\n     * @author Jirka Dell'Oro-Friedl, HFU, 2019\n     */\n    export class Time {\n        private start: number;\n        private scale: number;\n        private offset: number;\n        /** just testing comment */\n        private lastCallToElapsed: number; \n        private xz: string;\n\n        constructor() {\n            this.start = performance.now();\n            this.scale = 1.0;\n            this.offset = 0.0;\n            this.lastCallToElapsed = 0.0;\n        }\n        /**\n         * Retrieves the current scaled timestamp of this instance in milliseconds\n         */\n        get(): number {\n            return this.offset + this.scale * (performance.now() - this.start);\n        }\n        /**\n         * (Re-) Sets the timestamp of this instance\n         * @param _time The timestamp to represent the current time (default 0.0)\n         */\n        set(_time: number = 0): void {\n            this.offset = _time;\n            this.start = performance.now();\n            this.getElapsedSincePreviousCall();\n        }\n        /**\n         * Sets the scaling of this time, allowing for slowmotion (1) \n         * @param _scale The desired scaling (default 1.0)\n         */\n        setScale(_scale: number = 1.0): void {\n            this.set(this.get());\n            this.scale = _scale;\n            this.getElapsedSincePreviousCall();\n        }\n        /**\n         * Retrieves the current scaling of this time\n         */\n        getScale(): number {\n            return this.scale;\n        }\n        /**\n         * Retrieves the scaled time in milliseconds passed since the last call to this method\n         * Automatically reset at every call to set(...) and setScale(...)\n         */\n        getElapsedSincePreviousCall(): number {\n            let current: number = this.get();\n            let elapsed: number = current - this.lastCallToElapsed;\n            this.lastCallToElapsed = current;\n            return elapsed;\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                Time.ts\n            \n            class\n            Time\n            \n                58 %\n                (7/12)\n            \n        \n        \n            \n                \n                TimeTest.ts\n            \n            function\n            init\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                TimeTest.ts\n            \n            function\n            testAnimation\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                TimeTest.ts\n            \n            function\n            testNumbers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                TimeTest.ts\n            \n            variable\n            time\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            init   (TimeTest.ts)\n                        \n                        \n                            testAnimation   (TimeTest.ts)\n                        \n                        \n                            testNumbers   (TimeTest.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    TimeTest.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            init\n                        \n                        \n                    \n                \n            \n            \n                \ninit(_event)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _event\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            testAnimation\n                        \n                        \n                    \n                \n            \n            \n                \ntestAnimation()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            testNumbers\n                        \n                        \n                    \n                \n            \n            \n                \ntestNumbers()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    1 Class\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            time   (TimeTest.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    TimeTest.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            time\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Time\n\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
