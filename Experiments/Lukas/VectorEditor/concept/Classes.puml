@startuml VE Classes
skinparam monochrome true
skinparam componentStyle uml2
skinparam classAttributeIconSize 0
skinparam shadowing false
skinparam handwritten false

title Vector Editor Class Diagramm

' left to right direction
package FUDGE <<Rectangle>> {
	package Transfer {
		package Mutable <<Rectangle>>{
			
		}
	}

	package Math <<rectangle>> {
		class Vector2 extends Mutable.Mutator{
			+ x: number
			+ y: number

			+ equals(obj: Vector2): boolean
			+ magnitude(): number
			+ sqrMagnitude(): number
			+ normalize(): Vector2
			+ perpendicularVector(): Vector2
			+ scaled(s: number): Vector2

			{static} dot(a: Vector2, b: Vector2): number
			{static} add(...params: Vector2[]): Vector2
		}
	}

	package VectorEditor <<Rectangle>>{
		interface Shortcut{
			keys: number[]
		}
		class UIHandler{
			actions: Action[]
			loadActions()
			loadShortcuts()
			createUI()
			updateUI()
			deselectAll()
			updateSelectedObjectUI()
			updateSelectedObject()
		}

		class Editor{
			- paths: SketchPath[]
			- selectedPaths: SketchPath[]
			- selectedPoints: SketchPoint[]
			+ selectedAction: Action
			- canvas: HTMLCanvasElement
			- crc: CanvasRenderingContext2D
			- scale: number
			- transformationPoint: Vector2
			+ pressedKeys: number[]
			- uiHandler: UIHandler
			- showTangentsShortcut: Shortcut
			- quadraticShapesShortcut: Shortcut
			+ tangentsActive: boolean

			- redrawAll()
			- mousedown()
			- mousemove()
			- mouseup()
			- keydown()
			- keyup()
			- scroll()
			{static} + isShortcutPressed(_s: Shortcut): boolean

		}
		class UIElement extends DOM.HTMLElement{
			name: string
			hover: string
			help: string
			extendedHelp: string
			' element: HTMLElement
		}

		abstract Action extends UIElement{
			name: string
			buttonElement: HTMLButtonElement
			subMenu: UIElement
			shortcut: Shortcut
			selectedSubAction: Action
			subActions: Action[]
			' cursor: Image
			mousedown()
			mousemove()
			mouseup()
			prequisitesFulfilled(): boolean
			additionalDisplay(crc: CanvasRenderingContext2D)
			addAdditionalSubMenuOptions()
			exit()
		}

		class ActionSelect extends Action {
			boxSelect: boolean
			multiSelectShortcut: Shortcut
			move: MoveAction
			startPosition: Vector2
			currentPosition: Vector2
		}
		class ActionMove extends Action {
			- previousPosition: Vector2
		}
		class ActionTransform extends Action {
			scaleUp: SketchPoint
			scaleDown: SketchPoint
			scaleLeft: SketchPoint
			scaleRight: SketchPoint
			scaleUpLeft: SketchPoint
			scaleUpRight: SketchPoint
			scaleDownLeft: SketchPoint
			scaleDownRight: SketchPoint
			scalePoints: SketchPoint[]
			selectedScalePoint: SketchPoint
			
			move: MoveAction
			rotate: RotateAction
			scale: ScaleAction
		}
		class ActionScale extends Action {
			- previousPosition: Vector2
			- referencePoint: Vector2
			- mode: "x" | "y" | "xy"
		}
		class ActionRotate extends Action {
			- previousPosition: Vector2
		}
		class ActionCreateShapes extends Action {
			- startPosition: Vector2
			- currentPosition: Vector2
			- shapes: Shape[]
			- selectedShape: Shape
		}
		interface Shape {
			identifier: string
			createSketchPath(pos1: Vector2, pos2: Vector2): SketchPath
			additionalParameters:Object
		}
		class ActionVertexManipulation extends Action {

		}
		class ActionAddVertex extends Action {

		}
		class ActionNewPath extends Action {
			- newPath: SketchPath;
		}
		class ActionCombine extends Action {

		}
		class ActionExport extends Action {

		}

		'Associations
		Shortcut "1"-- "1"Action
		UIHandler -- "n" Action
		Editor -- "1" Action
		Editor .. UIHandler
		Action "1"--"n" Action
		CreateShapes -- "n" Shape
		ActionTransform <-- ActionMove : subaction
		ActionTransform <-- ActionScale : subaction
		ActionTransform <-- ActionRotate : subaction
		ActionSelect <-- ActionMove : subaction
		ActionVertexManipulation <-- ActionAddVertex : subaction
		ActionVertexManipulation <-- ActionNewPath : subaction
	}
	package SketchTypes <<Rectangle>>{
		class SketchObject extends Mutable.Mutator{
			+ color: string | CanvasGradient | CanvasPattern
			+ name: String
			+ order: number
			+ lineWidth: number
			+ transformationPoint: SketchPoint
			# path2d: Path2D
			{static} sort(a: SketchObject, b: SketchObject): number
		}

		class SketchPath extends SketchObject {
			- closed: boolean
			+ points: SketchVertex[]
			+ fillColor: string | CanvasGradient | CanvasPattern
			' + transformationPoint: Vector2;
			draw(context: CanvasRenderingContext2D, selected: boolean = false)
			generatePath2D()
			addVertexAtPos(vertex: SketchVertex, index: number = -1)
			move(d: Vector2)
		}

		class SketchPoint extends Math.Vector2{
			# path2d: Path2D
			generatePath2D(): Path2D
			draw(context: CanvasRenderingContext2D, selected: boolean = false)
			move(delta: Vector2)
			moveTo(newPos: Vector2)
		}

		class SketchVertex extends SketchPoint {
			activated: boolean
			tangentIn: TangentPoint
			tangentOut: TangentPoint
			+ parent: SketchPath
			draw(context: CanvasRenderingContext2D, selected: boolean = false, showTangents: boolean = false)
			move(dx: number, dy: number)
			activate()
		}

		class SketchTangentPoint extends SketchPoint {
			+ parent: SketchVertex
			generatePath2D(): Path2D
		}

		' Associations
		SketchPath "1" -- "n" SketchVertex
		SketchVertex "1" -- "2" TangentPoint
	}
}
@enduml