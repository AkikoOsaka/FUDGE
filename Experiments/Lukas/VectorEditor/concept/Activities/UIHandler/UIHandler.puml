@startuml UIHandler
skinparam monochrome true

title UIHandler

partition init {
	start
	:loadActions Ѱ;
	:loadShortcuts ᴪ;
	:createUI ₼;
	stop 
}
break

partition loadActions{
	start
	:this.actions = [];
	:this.actions.push(new SelectAction())
	this.actions.push(new MoveAction())
	...;
	stop
}

break

partition createUI {
	start
	while () is ([a of actions])
		:create Button for a
		in Main Toolbar, save
		it in a.buttonElement;
		:create secondary Toolbar for a
		and save it in a.subMenu;
		while () is ([s of a.subActions])
			:create Button for s
			in a.subMenu, save it in
			s.buttonElement;
		endwhile
	endwhile
	:add Eventlisteners to MainMenu 
	& secondary Menus 
	& propertiesMenu container;
	if () then([!Editor.selectedAction])
		:Editor.selectedAction = actions[0];
	endif
	:updateUI ₼;
	stop
}

break

partition updateUI {
	start
	while () is ([a of actions])
		:deselect a.buttonElement;
		:make a.subMenu invisible;
		if() then ([!a.prequisitesFulfilled()])
			:disable a.buttonElement;
		endif
		while () is ([sa of a.subActivities])
			:deselect sa.buttonElement;
			if() then ([!sa.prequisitesFulfilled()])
				:disable sa.buttonElement;
			endif
		endwhile
	endwhile
	:select Editor.selectedAction.buttonElement;
	:make Editor.selectedAction.subMenu visible;
	if() then ([!Editor.selectedAction.selectedSubAction &&
	Editor.selectedAction.subActions.length > 0])
		:E.sA.selectedSubAction = E.sA.subActions[0];
	endif
	if() then ([Editor.selectedAction.selectedSubAction])
		:select E.sA.selectedSubAction button;
	endif
	:update propertiesMenu;
	stop
}

break

partition handleClick{
	:_event: MouseEvent]
	if() then ([_event.target is HTMLButtonElement])
		:runAction: Action = getActionToButton(_event.target)];
		if() then([runAction.prequisitesFulfilled()])
			:Editor.selectedAction = runAction;
			:updateUI ₼;
		endif
	endif
	stop
}

break

partition getActionToButton{
	:_button: HTMLButtonElement]
}

@enduml